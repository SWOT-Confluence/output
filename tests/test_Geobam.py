# Standard imports
from pathlib import Path
from shutil import copyfile
import unittest

# Third-party imports
from netCDF4 import Dataset
import numpy as np
from numpy.testing import assert_array_almost_equal

# Local imports
from output.modules.GeoBam import GeoBAM

class test_Geobam(unittest.TestCase):
    """Test GeoBam class methods."""
    
    SOS_NEW = Path(__file__).parent / "sos_new" / "na_apriori_rivers_v07_SOS_results.nc"
    GB_DIR = Path(__file__).parent / "flpe"
    GB_SOS = Path(__file__).parent / "flpe" / "geobam" / "na_apriori_rivers_v07_SOS_results.nc"
    
    def get_sos_data(self):
        """Retrieve and return dictionary of SoS data."""
        
        ds = Dataset(self.SOS_NEW, 'r')
        rids = ds["reaches"]["reach_id"][:]
        nrids = ds["nodes"]["reach_id"][:]
        nids = ds["nodes"]["node_id"][:]
        ds.close()
        return { "reaches": rids, "node_reaches": nrids, "nodes": nids }
    
    def test_get_module_data(self):
        """Test get_module_data method."""
        
        # File operations to prepare for test
        copyfile(self.SOS_NEW, self.GB_SOS)
        sos_data = self.get_sos_data()
        
        # Run method
        gb = GeoBAM([7,8,9], self.GB_DIR, self.SOS_NEW, \
            sos_data["reaches"], sos_data["node_reaches"], sos_data["nodes"])
        gb_dict = gb.get_module_data(25)
        
        # Assert results
        i = np.where(sos_data["reaches"] == 77449100071)
        e_logq1 = [[[6.781465521439746, np.nan, 6.9351023486820225, 7.311341074768402, np.nan, 7.228838060891539, 7.1016278346968065, np.nan, 7.532271412692203, np.nan, 7.530352816570996, np.nan, 7.411703767695025, 7.330800661864713, np.nan, 7.436328179642443, 7.3873811903458035, np.nan, np.nan, 7.668479526987077, 7.797968357477741, np.nan, 7.548898905149485, 6.717111561190437, np.nan]]]
        assert_array_almost_equal(e_logq1, gb_dict["logQ"]["mean_chain1"][i,:])
        e_logq2 = [[[6.745244909594428, np.nan, 6.8983732825701525, 7.282493638260791, np.nan, 7.194084007500406, 7.0595980714709405, np.nan, 7.505236379195594, np.nan, 7.504907109837182, np.nan, 7.382829465407954, 7.297270800904774, np.nan, 7.407964343039317, 7.351683259674197, np.nan, np.nan, 7.646517131538256, 7.768825504055229, np.nan, 7.518558136557308, 6.673141567471473, np.nan]]]
        assert_array_almost_equal(e_logq2, gb_dict["logQ"]["mean_chain2"][i,:])
        e_logq3 = [[[6.836579300313072, np.nan, 6.985476293823099, 7.355512192560335, np.nan, 7.273815651954738, 7.1494948158536475, np.nan, 7.577382378965857, np.nan, 7.574744637464486, np.nan, 7.460193725594505, 7.370211622515542, np.nan, 7.480789388897622, 7.427440250486212, np.nan, np.nan, 7.711854200490059, 7.836250067364192, np.nan, 7.595889588462072, 6.770986051816373, np.nan]]]
        assert_array_almost_equal(e_logq3, gb_dict["logQ"]["mean_chain3"][i,:])
        ixs = np.where(sos_data["node_reaches"] == 77449100071)
        e_A01 = [223.8653428424151, 237.93694250883038, 249.57803002397705, 317.50876143385125, 271.59514526417, 213.23347319924227, 171.51246512254693, 226.92046502726419, 206.08662198101595, 236.0917435586482, 227.55285563936647, 231.62811349168445, 207.97102940511547, 208.11354788005863, 226.07430949399722, 208.98287535943638, 204.90209319402157, 186.28415299301844, 185.43945851229952, 219.83830824909364, 189.4674265325588, 165.6630206915582, 176.89055590703646, 195.73662597674038, 187.51537739117566, 225.05349756858215, 222.62698732481402, 199.01014565147548, 203.79863174061964, 244.39958131293665, 212.37671356800124, 203.11577643161408, 215.22910141809297, 202.4090760671338, 221.4736041884857, 204.23452145479962, 191.23618466745347, 166.36477806619843, 192.73496686533556, 195.80933233181392, 182.0616692658465, 210.4325927128653, 232.45485172084378, 199.8964344037839, 225.55288311767572, 207.68532666368338, 208.99989245272266, 216.9359528270895]
        assert_array_almost_equal(e_A01, gb_dict["A0"]["sd_chain1"][ixs])
        e_A02 = [210.9117556460823, 226.05600758033245, 250.17819601141574, 304.21692856272665, 267.43447290513706, 206.73625217495692, 179.52834386258405, 240.6120387911767, 201.31258458097787, 244.32797351063152, 204.04682073902214, 226.5359726238924, 223.2123077397066, 198.59222207412137, 215.01264455415966, 217.9710423143889, 193.39094282158365, 193.277632415137, 184.01962614528358, 207.1337028021175, 180.83579740452646, 170.84073282799974, 174.39133064131138, 202.77703669647684, 198.17501261219903, 198.98579904134664, 206.8285109863325, 212.35251527726055, 232.2245278320861, 230.76838412026336, 227.61643353216255, 201.53799119099574, 196.24820021687609, 205.34886101991762, 251.111284142511, 218.53473986367973, 196.31920501718733, 165.12043387792727, 181.3050345103102, 188.72667742704155, 196.05739385923448, 220.03058030669337, 245.06534942051957, 204.893753968599, 235.40139354154687, 199.11704012464966, 213.9201071673153, 228.55711109772272]
        assert_array_almost_equal(e_A02, gb_dict["A0"]["sd_chain2"][ixs])
        e_A03 = [213.43258664733065, 241.81442779321446, 257.63933887991607, 326.2557115144034, 289.35637539853286, 227.85659164069645, 195.86794003178937, 265.37952269453586, 226.8208327620313, 235.67798801638205, 236.14089808130535, 234.3342170582838, 207.77457488918088, 208.6180114763975, 219.57375090616725, 213.89063112026082, 203.31739788386085, 213.8098588595973, 208.71814752287383, 204.9386286567793, 199.03845583758365, 188.40957284876268, 169.74937760394252, 214.48535954189572, 187.62833429495805, 229.4100702164016, 213.80073041349812, 216.1370075645507, 235.18928226775213, 258.9921074024122, 229.06239171080148, 205.41650850809046, 211.2999213503152, 200.89500004969582, 239.67229734613767, 231.25900516769465, 205.66130013651838, 180.28169961610422, 200.94402859796983, 220.6361060813256, 201.6508446569533, 240.89842451969807, 265.73851413778175, 207.4568407882459, 261.3467295623549, 211.59966421213784, 221.0845933964359, 244.46253450461685]
        assert_array_almost_equal(e_A03, gb_dict["A0"]["sd_chain3"][ixs])

        # Clean up
        self.GB_SOS.unlink()
        
    def test_append_module_data(self):
        """Tests append_module_data method."""
        
        # File operations to prepare for test
        copyfile(self.SOS_NEW, self.GB_SOS)
        sos_data = self.get_sos_data()
        
        # Run method
        gb = GeoBAM([7,8,9], self.GB_DIR, self.GB_SOS, \
            sos_data["reaches"], sos_data["node_reaches"], sos_data["nodes"])
        gb_dict = gb.get_module_data(25)
        gb.append_module_data(gb_dict)
        
        # Assert results
        sos = Dataset(self.GB_SOS, 'r')
        gb_grp = sos["geobam"]
        i = np.where(sos_data["reaches"] == 77449100071)
        e_logq1 = [[6.781465521439746, np.nan, 6.9351023486820225, 7.311341074768402, np.nan, 7.228838060891539, 7.1016278346968065, np.nan, 7.532271412692203, np.nan, 7.530352816570996, np.nan, 7.411703767695025, 7.330800661864713, np.nan, 7.436328179642443, 7.3873811903458035, np.nan, np.nan, 7.668479526987077, 7.797968357477741, np.nan, 7.548898905149485, 6.717111561190437, np.nan]]
        assert_array_almost_equal(e_logq1, gb_grp["logQ"]["mean_chain1"][i].filled(np.nan))
        e_logq2 = [[6.745244909594428, np.nan, 6.8983732825701525, 7.282493638260791, np.nan, 7.194084007500406, 7.0595980714709405, np.nan, 7.505236379195594, np.nan, 7.504907109837182, np.nan, 7.382829465407954, 7.297270800904774, np.nan, 7.407964343039317, 7.351683259674197, np.nan, np.nan, 7.646517131538256, 7.768825504055229, np.nan, 7.518558136557308, 6.673141567471473, np.nan]]
        assert_array_almost_equal(e_logq2, gb_grp["logQ"]["mean_chain2"][i].filled(np.nan))
        e_logq3 = [[6.836579300313072, np.nan, 6.985476293823099, 7.355512192560335, np.nan, 7.273815651954738, 7.1494948158536475, np.nan, 7.577382378965857, np.nan, 7.574744637464486, np.nan, 7.460193725594505, 7.370211622515542, np.nan, 7.480789388897622, 7.427440250486212, np.nan, np.nan, 7.711854200490059, 7.836250067364192, np.nan, 7.595889588462072, 6.770986051816373, np.nan]]
        assert_array_almost_equal(e_logq3, gb_grp["logQ"]["mean_chain3"][i].filled(np.nan))
        ixs = np.where(sos_data["node_reaches"] == 77449100071)
        e_A01 = [223.8653428424151, 237.93694250883038, 249.57803002397705, 317.50876143385125, 271.59514526417, 213.23347319924227, 171.51246512254693, 226.92046502726419, 206.08662198101595, 236.0917435586482, 227.55285563936647, 231.62811349168445, 207.97102940511547, 208.11354788005863, 226.07430949399722, 208.98287535943638, 204.90209319402157, 186.28415299301844, 185.43945851229952, 219.83830824909364, 189.4674265325588, 165.6630206915582, 176.89055590703646, 195.73662597674038, 187.51537739117566, 225.05349756858215, 222.62698732481402, 199.01014565147548, 203.79863174061964, 244.39958131293665, 212.37671356800124, 203.11577643161408, 215.22910141809297, 202.4090760671338, 221.4736041884857, 204.23452145479962, 191.23618466745347, 166.36477806619843, 192.73496686533556, 195.80933233181392, 182.0616692658465, 210.4325927128653, 232.45485172084378, 199.8964344037839, 225.55288311767572, 207.68532666368338, 208.99989245272266, 216.9359528270895]
        assert_array_almost_equal(e_A01, gb_grp["A0"]["sd_chain1"][ixs].filled(np.nan))
        e_A02 = [210.9117556460823, 226.05600758033245, 250.17819601141574, 304.21692856272665, 267.43447290513706, 206.73625217495692, 179.52834386258405, 240.6120387911767, 201.31258458097787, 244.32797351063152, 204.04682073902214, 226.5359726238924, 223.2123077397066, 198.59222207412137, 215.01264455415966, 217.9710423143889, 193.39094282158365, 193.277632415137, 184.01962614528358, 207.1337028021175, 180.83579740452646, 170.84073282799974, 174.39133064131138, 202.77703669647684, 198.17501261219903, 198.98579904134664, 206.8285109863325, 212.35251527726055, 232.2245278320861, 230.76838412026336, 227.61643353216255, 201.53799119099574, 196.24820021687609, 205.34886101991762, 251.111284142511, 218.53473986367973, 196.31920501718733, 165.12043387792727, 181.3050345103102, 188.72667742704155, 196.05739385923448, 220.03058030669337, 245.06534942051957, 204.893753968599, 235.40139354154687, 199.11704012464966, 213.9201071673153, 228.55711109772272]
        assert_array_almost_equal(e_A02, gb_grp["A0"]["sd_chain2"][ixs].filled(np.nan))
        e_A03 = [213.43258664733065, 241.81442779321446, 257.63933887991607, 326.2557115144034, 289.35637539853286, 227.85659164069645, 195.86794003178937, 265.37952269453586, 226.8208327620313, 235.67798801638205, 236.14089808130535, 234.3342170582838, 207.77457488918088, 208.6180114763975, 219.57375090616725, 213.89063112026082, 203.31739788386085, 213.8098588595973, 208.71814752287383, 204.9386286567793, 199.03845583758365, 188.40957284876268, 169.74937760394252, 214.48535954189572, 187.62833429495805, 229.4100702164016, 213.80073041349812, 216.1370075645507, 235.18928226775213, 258.9921074024122, 229.06239171080148, 205.41650850809046, 211.2999213503152, 200.89500004969582, 239.67229734613767, 231.25900516769465, 205.66130013651838, 180.28169961610422, 200.94402859796983, 220.6361060813256, 201.6508446569533, 240.89842451969807, 265.73851413778175, 207.4568407882459, 261.3467295623549, 211.59966421213784, 221.0845933964359, 244.46253450461685]
        assert_array_almost_equal(e_A03, gb_grp["A0"]["sd_chain3"][ixs].filled(np.nan))
        
        # Clean up
        sos.close()
        self.GB_SOS.unlink()